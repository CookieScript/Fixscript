
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/CongoOhioDog/PerfectCorn/refs/heads/main/ButShitMyBrotherSwingDatBlunt.lua",true))()

-- Example
local guh = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name
local dick = os.date("%Y-%m-%d")
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer

local ping = "What The Skibidi"

local grassColor = Color3.fromRGB(50, 205, 50)

if not game:IsLoaded() then
    game.Loaded:Wait()
end

for _, part in pairs(workspace:GetDescendants()) do
    if part:IsA("BasePart") then
        if part.Material == Enum.Material.Grass then
            part.Color = grassColor
        end
    end
end

local Window = Library:Window({Name = string.format("Patz.lol ðŸŽƒ | %s | %s", guh, dick), Amount = 6})

local plyaha = game.Players.LocalPlayer.Name
local dick2 = string.sub(tostring(math.random()), 3, 8) 
local what = {"Michael Myers", "Terrifier", "Scream"}
local halloweenCharacter = what[math.random(#what)]

local target = "therealx_ora"

local Watermark = Library:Watermark({Name = string.format("$$ Patz $$ | %s | %s | %s | %s | %s | Target: %s", plyaha, dick2, "Private", halloweenCharacter, ping, target)})


getgenv().Sentinel = {
    Enabled = true,
    HorizontalPrediction = 0.1,
    VerticalPrediction = 0.1,
    jumpoffset2 = -1,
    jumpoffset = 0,
    ResolverEnabled = false,
    SelectedPart = "HumanoidRootPart",
    AutoPrediction = true,
    AutoPredMode = "PingBased", 
    ShootDelay = 0.22,
    NoGroundShot = true,
    AutoAir = true,
    LookAt = true,
    smoothness = 0.900,
    TracerEnabled = true,
    NearestPart = false,
    speedvalue = 1,
    MacroSpeed = 0.1,
    Camera = false,
    easingStyle = "Sine",
    easingDirection = "Out",
    JumpBreak = false,
    network = false,
    AntiGround = false
}

local GrenadeTP = false
local RocketTP = false
getgenv().Desync = false
getgenv().AntiLockType = "Behind"
getgenv().Direction = Vector3.new(0, 0, -1)


local TargetAimbot = {
    Enabled = true, 
    Keybind = Enum.KeyCode.Q,
    Autoselect = false,
    Prediction = 0.145, 
    RealPrediction = 0.145, 
    Resolver = false, 
    ResolverType = "Recalculate", 
    JumpOffset = 0.06, 
    RealJumpOffset = 0.09, 
    HitParts = {"HumanoidRootPart"}, 
    RealHitPart = "HumanoidRootPart", 
    KoCheck = false, 
    LookAt = false,
    CSync = {
        Enabled = false,
        Type = "Orbit",
        Distance = 10,
        Height = 2,
        Speed = 10,
        RandomAmount = 10,
        Color = Color3.fromRGB(255, 255, 255),
    },
    ViewAt = false,
    Tracer = true,
    Highlight = true,
    HighlightColor1 =Color3.fromRGB(255, 255, 255),
    HighlightColor2 =Color3.fromRGB(255, 255, 255),
    Stats = false, 
    UseFov = false,
    HitEffect = true,
    HitEffectType = "Coom", -- Nova, Crescent Slash, Coom, Cosmic Explosion, Slash, Atomic Slash
    HitEffectColor = Color3.fromRGB(255, 255, 255),
    HitSounds = true,
    HitSound = "Bameware",
    HitChams = true,
    HitChamsMaterial = Enum.Material.Neon,
    HitChamsDuration = 1,
    HitChamsColor = Color3.fromRGB(154, 7, 150)
}

local  Highlight = false


local Indicator = Library:Indicator({Name = "New Indicator"})
-- Indicator Options
local TextIndicator = Indicator:NewValue({Name = "New Text", Value = "value here"})
local BarIndicator = Indicator:NewBar({Name = "New Bar", Value = 10, Min = 0, Max = 100})
--
local Page = Window:Page({Name = "Main", Weapons = true})
local Sat = Window:Page({Name = "Rage", Weapons = true})
Window:Page({Name = "Visuals"})
local Settings = Window:Page({Name = "Settings"})
--
local SubPage1 = Page:Weapon({Icon = "rbxassetid://88836741434398"})
local SubPage2 = Page:Weapon({Icon = "rbxassetid://106397886212631"})

local SubPage3 = Page:Weapon({Icon = "rbxassetid://138737595020251"})
local SubPage4 = Page:Weapon({Icon = "rbxassetid://113531571097970"})

--[[ http://www.roblox.com/asset/?id=17677463033

Ak47 : rbxassetid://88836741434398

REV : rbxassetid://106397886212631

SG : 118698023926650

Snipah : 104037274406938

138737595020251

113531571097970

]]



local TargetAimSection = SubPage1:Section({Name = "Target Aim", Side = "Left"})
TargetAimSection:Toggle({
    Name = "Enabled",
    Callback = function(a)
        getgenv().Sentinel.Enabled = a
    end
})

TargetAimSection:Toggle({
    Name = "Look At",
    Callback = function(a)
        getgenv().Sentinel.LookAt = a 
    end
})

TargetAimSection:Toggle({
    Name = "Highlight",
    Callback = function(a)
        Highlight = a
    end
})

TargetAimSection:Toggle({
    Name = "Auto Air",
    Callback = function(a)
        getgenv().Sentinel.AutoAir = a
    end
})

TargetAimSection:Toggle({
    Name = "Resolver",
    Callback = function(a)
        getgenv().Sentinel.ResolverEnabled = a
    end
})

TargetAimSection:Toggle({
    Name = "Grenade Tp",
    Callback = function(a)
        GrenadeTP = a
    end
})

TargetAimSection:Toggle({
    Name = "Rocket Tp",
    Callback = function(a)
        RocketTP = a
    end
})

local HitPartSection = SubPage1:Section({Name = "HitPart", Side = "Left"})
HitPartSection:Toggle({
    Name = "NearestPart",
    Callback = function(a)
        getgenv().Sentinel.NearestPart = a
    end
})

HitPartSection:List({
    Name = "BodyPart",
    Options = {
        "Head", "UpperTorso", "LowerTorso", "HumanoidRootPart", 
        "LeftUpperArm", "LeftLowerArm", "LeftHand", 
        "RightUpperArm", "RightLowerArm", "RightHand", 
        "LeftUpperLeg", "LeftLowerLeg", "LeftFoot", 
        "RightUpperLeg", "RightLowerLeg", "RightFoot"
    },
    Default = "HumanoidRootPart",
    Callback = function(a)
        getgenv().Sentinel.SelectedPart = a
    end
})






local PredictionSection = SubPage1:Section({Name = "Prediction", Side = "Right"})
PredictionSection:Toggle({
    Name = "Auto Prediction",
    Callback = function(a)
        getgenv().Sentinel.AutoPrediction = a
    end
})

PredictionSection:Textbox({
    Name = "Horizontal Prediction",
    Default = tostring(getgenv().Sentinel.HorizontalPrediction),
    Callback = function(a)
        getgenv().Sentinel.HorizontalPrediction2 = tonumber(a) or 0.1
    end
})
PredictionSection:Textbox({
    Name = "Vertical Prediction",
    Default = tostring(getgenv().Sentinel.VerticalPrediction),
    Callback = function(a)
        getgenv().Sentinel.VerticalPrediction2 = tonumber(a) or 0.1
    end
})

--[[
local Section = SubPage1:Section({Name = "Main"})
local Section2 = SubPage1:Section({Name = "New Section", Side = "Right"})
SubPage1:Section({Name = "wave is detected"})
--
Section:Toggle(
    {
        Name = "Enabled",
        Callback = function(State)
               print(State)
        end
    }
)

Section:Toggle(
    {
        Name = "Enabled",
        Callback = function(State)
               print(State)
        end
    }
)

Section:Slider({Suffix = "%"})

Section:Slider(
    {
        Name = "update indicator bar",
        Min = 0,
        Max = 100,
        Default = 10,
        Decimals = 1,
        Callback = function(State)
            print(State)
        end
    }
)

Section:List({Name = "list", Options = {"1", "2", "3", "4"}, Default = "1"})


Section:Button(
    {
        Name = "new notification",
        Callback = function(State)
            Library:Notification("testing lol", 5)
        end
    }
)
]]
-- // cam would go here

local Bumt = SubPage2:Section({Name = "Main"})

Bumt:Toggle({
    Name = "Enabled",
    Callback = function(a)
        getgenv().Sentinel.Camera = a
    end
})

Bumt:Textbox({
    Name = "Camera",
    Default = tostring(getgenv().Sentinel.smoothness),
    Callback = function(a)
        getgenv().Sentinel.smoothness = tonumber(a)
    end
})

Bumt:List({
    Name = "Easing Style",
    Options = {
        "Linear", "Quad", "Cubic", "Quart", "Quint", "Sine", 
        "Exponential", "Circular", "Back", "Bounce", "Elastic"
    },
    Default = getgenv().Sentinel.easingStyle,
    Callback = function(a)
        getgenv().Sentinel.easingStyle = a
    end
})

Bumt:List({
    Name = "Easing Direction",
    Options = {"In", "Out", "InOut"},
    Default = getgenv().Sentinel.easingDirection,
    Callback = function(a)
        getgenv().Sentinel.easingDirection = a
    end
})


--
do -- Settings
    local CFG = Settings:Section({Name = "Config", Zindex = 2})
    --
    local ConfigList = CFG:List({Name = "Config", Flag = "SettingConfigurationList", Options = {}})
    CFG:Textbox({Flag = "SettingsConfigurationName", Name = "Config Name"})
    --
    local CurrentList = {}
    local function UpdateConfigList()
        local List = {}
        for idx, file in ipairs(listfiles("Patz/Configs")) do
            local FileName = file:gsub("Patz/Configs\\", ""):gsub(".cfg", "")
            List[#List + 1] = FileName
        end

        local IsNew = #List ~= #CurrentList
        if not IsNew then
            for idx, file in ipairs(List) do
                if file ~= CurrentList[idx] then
                    IsNew = true
                    break
                end
            end
        end

        if IsNew then
            CurrentList = List
            ConfigList:Refresh(CurrentList)
        end
    end
    --
    CFG:Button(
        {
            Name = "Create",
            Callback = function()
                local Success, Error =
                    pcall(
                    function()
                        local ConfigName = Flags.SettingsConfigurationName
                        if ConfigName == "" or isfile("Patz/Configs/" .. ConfigName .. ".cfg") then
                            return
                        end
                        writefile("Patz/Configs/" .. ConfigName .. ".cfg", "")
                        UpdateConfigList()
                    end
                )
            end
        }
    ):Button(
        {
            Name = "Save",
            Callback = function()
                local Success, Error =
                    pcall(
                    function()
                        local SelectedConfig = Flags.SettingConfigurationList
                        if SelectedConfig then
                            writefile("Patz/Configs/" .. SelectedConfig .. ".cfg", Library:GetConfig())
                        end
                    end
                )
            end
        }
    )
    CFG:Button(
        {
            Name = "Load",
            Callback = function()
                local Success, Error =
                    pcall(
                    function()
                        local SelectedConfig = Flags.SettingConfigurationList
                        if SelectedConfig then
                            Library:LoadConfig(readfile("Patz/Configs/" .. SelectedConfig .. ".cfg"))
                        end
                    end
                )
            end
        }
    ):Button(
        {
            Name = "Delete",
            Callback = function()
                local SelectedConfig = Flags.SettingConfigurationList
                if SelectedConfig then
                    delfile("Patz/Configs/" .. SelectedConfig .. ".cfg")
                end
                UpdateConfigList()
            end
        }
    )
    CFG:Button(
        {
            Name = "Refresh",
            Callback = function()
                UpdateConfigList()
            end
        }
    )
    --
    CFG:Keybind(
        {
            Name = "Menu Key",
            Flag = "MenuKey",
            UseKey = true,
            Default = Enum.KeyCode.End,
            Callback = function(State)
                Library.UIKey = State
            end
        }
    )
    CFG:Colorpicker(
        {
            Name = "Menu Accent",
            Flag = "MenuAccent",
            Default = Library.Accent,
            Callback = function(State)
                Library:ChangeAccent(State)
            end
        }
    )
    CFG:Toggle(
        {
            Name = "Show Watermark",
            Flag = "Watermark",
            Callback = function(State)
                Watermark:SetVisible(State)
            end
        }
    )
    CFG:Textbox(
    {
        Flag = "WatermarkText",
        Name = "Watermark Text",
        State = string.format("$$ Patz $$ | %s | %s | %s", plyaha, dick2, "Private"),
        Callback = function(State)
            Watermark:UpdateText(State)
        end
    }
)



end
